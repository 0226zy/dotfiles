" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
let g:spacevim_plug_home = '~/.vim/plugged'

" The default leader key is space key.
" Uncomment the line below and modify "<\Space>" if you prefer another
" let g:spacevim_leader = "<\Space>"

" The default local leader key is comma.
" Uncomment the line below and modify ',' if you prefer another
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim
let g:spacevim_layers = [
      \ 'fzf', 'better-defaults', 'which-key',
      \ ]

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim.gui
"   Layer 'airline'
" endif

" Manage your own plugins, refer to vim-plug's instruction for more detials.
function! UserInit()

  Layer 'fzf'
  Layer 'ycmd'
  Layer 'syntax-checking'

  Layer 'emoji'
  Layer 'goyo'

  Layer 'html'
  "Layer 'python'
  Layer 'markdown'
  Layer 'c-c++'

  " Add plugin via Plug command.
  Plug 'junegunn/seoul256.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'arcticicestudio/nord-vim'
  Plug 'ryanoasis/vim-devicons'
  Plug 'scrooloose/nerdcommenter'
  Plug 'majutsushi/tagbar'
  Plug 'mileszs/ack.vim'
  Plug 'dyng/ctrlsf.vim'
  Plug 'easymotion/vim-easymotion'
  Plug 'Shougo/vimproc.vim',{'do' : 'make'}
  Plug 'benmills/vimux'
  Plug 'uarun/vim-protobuf'
  Plug 'tpope/vim-surround'
  Plug 'luochen1990/rainbow'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'benmills/vimux'
  Plug 'uarun/vim-protobuf'
  Plug 'tpope/vim-surround'
  Plug 'luochen1990/rainbow'
  "Plug 'Shougo/neocomplete.vim'
  "Plug 'Shougo/neosnippet.vim'
  "Plug 'Shougo/neosnippet-snippets'
  Plug 'bkad/CamelCaseMotion'
  Plug 'joshdick/onedark.vim'
  Plug 'arcticicestudio/nord-vim'
  Plug 'solarnz/thrift.vim'
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'  " markdown 语法高亮
  Plug 'vim-scripts/TaskList.vim'
  Plug 'jiangmiao/auto-pairs'
  Plug 'Yggdroot/indentLine'    " 显示缩进对齐线
  "Plug 'Shougo/denite.vim'
  "Plug 'Shougo/vimproc'
  Plug 'Shougo/vimshell.vim'
  "Plug 'mbbill/echofunc'
  Plug 'Shougo/unite.vim'       " 全局查找
  Plug 'Shougo/neomru.vim'
  Plug 'ycm-core/YouCompleteMe'
  "Plug 'vim-scripts/YankRing.vim'
  "Plug 'wakatime/vim-wakatime'
  Plug 'dense-analysis/ale'
  Plug 'liuchengxu/vista.vim'
  Plug 'chr4/nginx.vim'
  Plug 'fatih/vim-go'

endfunction

" Override the default settings as well as adding extras
function! UserConfig()
  " If you have installed the powerline fonts and want to enable airline layer
  " let g:airline_powerline_fonts=1

  " Use gui colors in terminal if available
  function! s:enable_termgui()
    if has('termguicolors')
      set termguicolors
      if g:spacevim.tmux
        " If use vim inside tmux, see https://github.com/vim/vim/issues/993
        " set Vim-specific sequences for RGB colors
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      endif
    endif
  endfunction

  syntax on
  "colorscheme onedark
  colorscheme nord
  let g:nord_italic = 1
  let g:nord_underline = 1
  let g:nord_italic_comments = 1
  let g:nord_uniform_status_lines = 1
  let g:nord_comment_brightness = 12
"------------------------------------------------------------------------------
"-----------------------------------   NERDTree  ------------------------------
"------------------------------------------------------------------------------
"set shortcut key
"map <F4> :NERDTreeMirror<CR>
map <F5>  :NERDTreeToggle<CR>
"------------------------------------------------------------------------------
"-----------------------------------   tagbar  --------------------------------
"------------------------------------------------------------------------------
nmap <F9> :TagbarToggle<CR>
"------------------------------------------------------------------------------
"-----------------------------------   neosnippet.vim  ------------------------
"------------------------------------------------------------------------------
" neocomplete 在neocomplete 跳出选择框时，使用快捷键选择
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
"------------------------------------------------------------------------------
"----------------------------------- neocomplete.vim --------------------------
"------------------------------------------------------------------------------
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

"------------------------------------------------------------------------------
"-----------------------------------   global setting  ------------------------
"------------------------------------------------------------------------------
" 使他 tab 的缩进为4空格
set expandtab
set sw=4

autocmd BufNewFile *.[ch],*.hpp,*.cpp,*.cc exec ":call Addreadme()"
function Addreadme()
    call setline(1,"/****************************************************************************")
    call append(1," * Copyright(c) ".strftime("%Y").", all rights reserved" )
    call append(2," *")
    call append(3," * File:       \t".expand("%:t"))
    call append(4," * Author:     \tT1035")
    call append(5," * Revision:")
    call append(6," * Description:")
    call append(7," * Create:     \t".strftime("%Y-%m-%d %H:%M:%S"))
    call append(8," * Modified:   \t".strftime("%Y-%m-%d %H:%M:%S"))
    call append(9," *")
    call append(10," **************************************************************************/")
endf

"autocmd FileWritePre,BufWritePre *.[ch],*.hpp,*.cpp,*.cc exec "call DataInsert()"
function DataInsert()
  "call curosr(8,1)
  if search("Modified") != 0
    let line = line(".")
    call setline(line," * Modified:\t".strftime("%Y-%m-%d %H:%M:%S"))
  endif
endf

" python 文件头
function HeaderPython()
  call setline(1,"#!/bin/python3")
  call append(1,"#-*- coding:utf-8 -*-")
  call append(2,"# grbh0226@gmail.com".strftime('%Y-%m-%d %T',localtime()))
endf

function HeaderBash()
  call setline(1,"#!/bin/bash")
  call append(1,"#T1035\t".strftime('%Y-%m-%d %T',localtime()))
endf

autocmd BufNewFile *.py call HeaderPython()
autocmd BufNewFile *.sh call HeaderBash()

"--------------------------------------------------------------------------------------------
"----------------------------------- ctrlsf.vim   ------------------------
"--------------------------------------------------------------------------------------------
nmap <Leader><Leader>c :CtrlSF<space>
" 用 quickfix 窗口风格查看结果
let g:ctrlsf_default_view_mode ='compact'



"--------------------------------------------------------------------------------------------
"----------------------------------- unite.vim   ------------------------
"--------------------------------------------------------------------------------------------
let g:unite_enabel_start_insert=1
let g:unite_source_hitsotry_yank_enable=1
let g:unite_source_file_mru_limit=200
"call unite#filters#matcher_default#user(['matcher_fuzzy'])
nnoremap <silent><leader>uy :<C-u>Unite history/yank<CR>
nnoremap <silent><leader>ub :<C-u>Unite buffer<CR>
nnoremap <silent><leader>uf :<C-u>Unite file buffer file_mru<CR>
nnoremap <silent><leader>ur :<C-u>Unite  file_rec/async buffer file_mru<CR>
nnoremap <silent><leader>ul :<C-u>Unite line<CR>

"--------------------------------------------------------------------------------------------
"----------------------------------- 按下 F1 显示 当前行所在的函数名  ------------------------
"--------------------------------------------------------------------------------------------
fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$",'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
map <F11> :call ShowFuncName() <CR>

  " If your terminal(-emulator) supports true colors, uncomment the line below
  " call s:enable_termgui()
endfunction
